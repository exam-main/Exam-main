generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MENTOR
  ASSISTANT
  STUDENT
}

enum CourseLevel {
  BEGINNER
  PRE_INTERMEDIATE
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
}

enum PaidVia {
  PAYME
  CLICK
  CASH
}

enum HomeworkSubStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ExamAnswer {
  variantA
  variantB
  variantC
  variantD
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  phone     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  fullName  String
  avatarUrl String?
  country   String?
  createdAt DateTime @default(now())

  mentorProfile       MentorProfile?
  assignedCourses     AssignedCourse[]
  purchasedCourses    PurchasedCourse[]
  ratings             Rating[]
  lastActivity        LastActivity?
  lessonViews         LessonView[]
  homeworkSubmissions HomeworkSubmission[]
  questions           Question[]
  questionAnswers     QuestionAnswer[]
  mentorCourses       Course[]             @relation("MentorCourses")
  examResults         ExamResult[]
}



model MentorProfile {
  id         Int     @id @default(autoincrement())
  about      String?
  job        String?
  experience Int
  telegram   String?
  instagram  String?
  linkedin   String?
  facebook   String?
  github     String?
  website    String?
  userId     Int     @unique
  user       User    @relation(fields: [userId], references: [id])
}

model CourseCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  courses   Course[]
}

model Course {
  id         String      @id @default(uuid())
  name       String
  about      String
  price      Decimal
  banner     String
  introVideo String?
  level      CourseLevel
  published  Boolean     @default(false)
  updatedAt  DateTime?
  createdAt  DateTime    @default(now())

  categoryId Int
  category   CourseCategory @relation(fields: [categoryId], references: [id])

  mentorId Int
  mentor   User @relation("MentorCourses", fields: [mentorId], references: [id])

  assignedCourses  AssignedCourse[]
  purchasedCourses PurchasedCourse[]
  ratings          Rating[]
  lastActivities   LastActivity[]
  lessonGroups     LessonGroup[]
  questions        Question[]
}

model AssignedCourse {
  userId    Int
  courseId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model PurchasedCourse {
  courseId    String
  userId      Int
  amount      Decimal?
  paidVia     PaidVia
  purchasedAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([courseId, userId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  rate      Int
  comment   String
  createdAt DateTime @default(now())

  courseId String
  userId   Int

  course Course @relation(fields: [courseId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model LastActivity {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  courseId  String?
  groupId   Int?
  lessonId  String?
  url       String?
  updatedAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  course Course? @relation(fields: [courseId], references: [id])
}

model LessonGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  lessons     Lesson[]
  exams       Exam[]
  examResults ExamResult[]
}

model Lesson {
  id        String    @id @default(uuid())
  name      String
  about     String
  video     String
  updatedAt DateTime?
  createdAt DateTime  @default(now())

  groupId Int
  group   LessonGroup @relation(fields: [groupId], references: [id])

  lessonViews LessonView[]
  lessonFiles LessonFile[]
  homework    Homework?
}

model LessonView {
  lessonId String
  userId   Int
  view     Boolean

  lesson Lesson @relation(fields: [lessonId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([lessonId, userId])
}

model LessonFile {
  id        Int      @id @default(autoincrement())
  file      String
  note      String?
  createdAt DateTime @default(now())

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model Homework {
  id        Int       @id @default(autoincrement())
  task      String
  file      String?
  updatedAt DateTime?
  createdAt DateTime  @default(now())

  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  submissions HomeworkSubmission[]
}

model HomeworkSubmission {
  id        Int               @id @default(autoincrement())
  text      String?
  file      String
  reason    String?
  status    HomeworkSubStatus @default(PENDING)
  updatedAt DateTime?
  createdAt DateTime          @default(now())

  homeworkId Int
  homework   Homework @relation(fields: [homeworkId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Exam {
  id        Int        @id @default(autoincrement())
  question  String
  variantA  String
  variantB  String
  variantC  String
  variantD  String
  answer    ExamAnswer
  createdAt DateTime   @default(now())

  lessonGroupId Int
  lessonGroup   LessonGroup @relation(fields: [lessonGroupId], references: [id])
}

model ExamResult {
  id        Int      @id @default(autoincrement())
  passed    Boolean
  corrects  Int
  wrongs    Int
  createdAt DateTime @default(now())

  lessonGroupId Int
  userId        Int

  user        User        @relation(fields: [userId], references: [id])
  lessonGroup LessonGroup @relation(fields: [lessonGroupId], references: [id])
}

model Question {
  id        Int       @id @default(autoincrement())
  text      String
  file      String?
  read      Boolean   @default(false)
  readAt    DateTime?
  updatedAt DateTime?
  createdAt DateTime  @default(now())

  userId   Int
  courseId String

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  answer QuestionAnswer?
}

model QuestionAnswer {
  id        Int       @id @default(autoincrement())
  text      String
  file      String?
  updatedAt DateTime?
  createdAt DateTime  @default(now())

  questionId Int      @unique
  question   Question @relation(fields: [questionId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}
